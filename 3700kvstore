#!/usr/bin/env python

import sys, socket, select, time, json, random, math

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

num_total = len(replica_ids) + 1
last = 0
last_other = 0
past_beats = []
election_timeout = False
current_term = 0
leader = False
candidate = False
votes = 0
majority = math.ceil(num_total / 2) + 1

current_leader = ""
voting_hist = []

log = []
kvstore = {}

commit_index = 0
applied_index = 0

next_index = {}
match_index = {}


for id in replica_ids:
	next_index[id] = 0
	match_index[id] = 0

def up_to_date(log):
	if log['term'] > current_term:
		return True
	elif log['term'] == current_term:
		return log['index'] >= len(log) - 1
	else:
		return False

def send_append_entry(msg):
	for id in replica_ids:
		rep_next_index = next_index[id]
		if len(log) == 0:
			term = 1
		else:
			term = log[rep_next_index]["term"]
		msg = {"src": my_id, "dst": id,
			   "leader": my_id, "type": "append_entry",
			   "key": msg['key'], "value": msg['value'],
			   "term": current_term, "prev_index": rep_next_index - 1,
			   "prev_term": term, "lead_commit_index": commit_index,
			   "client_ID": msg['src'], "MID": msg["MID"]}
		sock.send(json.dumps(msg).encode())


def send_to_follower(msg):
	index = next_index[msg['src']]
	the_key = ""
	for key in list(log[applied_index].keys()):
		if key != 'term' and key != 'client_ID' and key != 'MID':
			the_key = key
	if index == 0:
		prev_term = 1
	else:
		prev_term = log[index-1]['term']

	msg = {"src": my_id, "dst": id,
		   "leader": my_id, "type": "append_entry",
		   "key": the_key, "value": log[index][the_key],
		   "term": log[index]['term'], "prev_index": index - 1,
			"prev_term": prev_term, "lead_commit_index": commit_index,
		   "client_ID": msg['src'], "MID": msg["MID"]}
	json_msg = json.dumps(msg)
	sock.send(json_msg.encode())


while True:
	ready = select.select([sock], [], [], 0.1)[0]

	if votes >= majority and candidate:
		print(str(my_id) + " got enough votes")
		current_leader = my_id
		leader = True
		candidate = False
		for id in replica_ids:
			next_index[id] = len(log)
			match_index[id] = 0

	if sock in ready:
		msg_raw = sock.recv(32768)

		if len(msg_raw) == 0: continue
		msg = json.loads(msg_raw)

		# received heartbeat
		# heartbeat is from the new leader, stop candidacy
		if msg['type'] == "heartbeat":
			past_beats.append(1)
			current_leader = msg['src']
			candidate = False

		# if you get a request vote, vote for them if you have not yet voted in this term
		if msg['type'] == "RequestVote":
			# if you haven't voted yet this term and they have greater or equal term
			if msg['term'] not in voting_hist and up_to_date(msg):
				return_msg = {"src": my_id, "dst": msg['src'],
							  "leader": "FFFF", "type": "vote"}
				return_msg_json = json.dumps(return_msg)
				sock.send(return_msg_json.encode())
				voting_hist.append(msg['term'])

		# follower committed
		if msg['type'] == 'append_ok':
			next_index[msg['src']] = msg['index']
			match_index[msg['src']] = msg['index']

		if msg['type'] == "append_fail":
			next_index[msg['src']] -= 1
			send_to_follower(msg)

		# append_entry from leader, append to own and send back OK
		if msg['type'] == 'append_entry':
			if msg['key'] == "":
				past_beats.append(1)
				current_leader = msg['src']
				candidate = False
				continue
			if msg['term'] < current_term:
				# log is mismatched
				return_msg = {"src": my_id, "dst": msg['src'],
							  "leader": current_leader, "index": len(log) - 1,
							  "type": "append_fail"}
				return_msg_json = json.dumps(return_msg)
				sock.send(return_msg_json.encode())
				print("term mismatched")
				continue
			elif msg['prev_index'] == -1:
				return_msg = {"src": my_id, "dst": msg['src'],
							  "leader": current_leader, "index": 0,
							  "type": "append_ok"}
				return_msg_json = json.dumps(return_msg)
				sock.send(return_msg_json.encode())
			elif len(log) - 1 < msg['prev_index'] or \
					log[int(msg["prev_index"])]["term"] != msg['prev_term']:
				# log is mismatched
				return_msg = {"src": my_id, "dst": msg['src'],
							  "leader": current_leader, "index": len(log) - 1,
							  "type": "append_fail"}
				return_msg_json = json.dumps(return_msg)
				sock.send(return_msg_json.encode())
				print("log index mismatched")
				continue
			elif len(log) - 1 >= int(msg['prev_index']) + 1:
				if log[msg['prev_index'] + 1]["term"] != msg['term']:
					log = log[0 : msg['prev_index'] + 1]
			log.append({msg['key']: msg['value'], "term": msg['term'],
						"client_ID": msg['src'], "MID": msg['MID']})
			return_msg = {"src": my_id, "dst": msg['src'],
						  "leader": current_leader, "index": len(log) - 1,
						  "type": "append_ok"}
			return_msg_json = json.dumps(return_msg)
			sock.send(return_msg_json.encode())

			if msg['lead_commit_index'] > commit_index:
				commit_index = min(msg['lead_commit_index'], len(log) - 1)

		# if you get a vote, keep track
		if msg['type'] == "vote" and candidate:
			votes += 1

		# if you get a put message
		if msg['type'] == 'put':
			# if there is no current leader, fail and make client retry until leader is found
			if current_leader == "":
				return_msg = {"src": my_id, "dst": msg['src'],
							  "leader": msg['leader'], "type": "fail",
							  "MID": msg['MID']}
				return_msg_json = json.dumps(return_msg)
				sock.send(return_msg_json.encode())
			# redirect to leader
			elif not leader:
				return_msg = {"src": my_id, "dst": msg['src'],
							  "leader": current_leader, "type": "redirect",
							  "MID": msg['MID']}
				return_msg_json = json.dumps(return_msg)
				sock.send(return_msg_json.encode())
			# you are leader, append to own log and send out to replicas
			else:
				# put into own log
				log.append({msg["key"]: msg["value"], "term": current_term,
							"client_ID": msg['src'], "MID": msg['MID']})

				# send out append entries
				send_append_entry(msg)




		# get message from client
		if msg['type'] == 'get':
			# if no current leader, make client retry
			if current_leader == "":
				return_msg = {"src": my_id, "dst": msg['src'],
							  "leader": msg['leader'], "type": "fail",
							  "MID": msg['MID']}
			# redirect to leader
			elif not leader:
				return_msg = {"src": my_id, "dst": msg['src'],
							  "leader": current_leader, "type": "redirect",
							  "MID": msg['MID']}
			# if leader, get the value and send back
			else:
				value = kvstore.get(msg['key'], "")
				return_msg = {"src": my_id, "dst": msg['src'],
							  "leader": my_id, "type": "ok", "MID": msg['MID'], "value": value}
			return_msg_json = json.dumps(return_msg)
			sock.send(return_msg_json.encode())

	if commit_index > applied_index:
		applied_index += 1
		the_key = ""
		for key in list(log[applied_index].keys()):
			if key != 'term' and key != 'client_ID' and key != 'MID':
				the_key = key
		val = log[applied_index][the_key]
		kvstore[the_key] = val
		# client ID, MID
		return_msg = {"src": my_id, "dst": log[applied_index]['client_ID'],
					  "leader": current_leader, "type": "ok", "MID": log[applied_index]['MID']}
		return_msg_json = json.dumps(return_msg)
		sock.send(return_msg_json.encode())

	elif leader:
		for N in range(commit_index + 1, len(log)):
			num_matched = 0
			for id in replica_ids:
				if match_index[id] >= N and log[N]["term"] == current_term:
					commit_index = N

	clock = time.time()
	second_clock = time.time()

	# code runs every 2 seconds
	if clock - last > 2 and leader:
		# send heartbeat
		for id in replica_ids:
			rep_next_index = next_index[id]
			if len(log) == 0:
				term = 1
			else:
				term = log[rep_next_index]["term"]
			msg = {"src": my_id, "dst": id,
				   "leader": my_id, "type": "append_entry",
				   "key": "", "value": "",
				   "term": current_term, "prev_index": rep_next_index - 1,
				   "prev_term": term, "lead_commit_index": commit_index}
			print(str(my_id) + " sent heartbeat")
			sock.send(json.dumps(msg).encode())
		last = clock

	# if have not received a heart beat... (empty list)
	if second_clock - last_other > random.randint(4,8) and not leader:
		# if no heartbeats received.. then begin election timeout
		if len(past_beats) == 0:
			election_timeout = True
		else:
			past_beats = []
		last_other = second_clock

	if election_timeout:
		# transition to candidate
		candidate = True

		# majority is -1 given the leader failed
		# majority -= current_term

		# increment the current term
		current_term += 1

		# vote for yourself
		votes = 1
		# request votes from others
		if len(log) == 0:
			term = 1
		else:
			term = log[-1]['term']

		msg = {'src': my_id, 'dst': "FFFF", 'leader': "FFFF",
			   'type': 'RequestVote', "term": current_term,
			   "index": len(log) - 1,
					   "prev_term": term}
		sock.send(json.dumps(msg).encode())
		print("requesting votes")
		election_timeout = False
