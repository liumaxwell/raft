#!/usr/bin/env python

import sys, socket, select, time, json, random, math

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

time.sleep(1)

num_total = len(replica_ids) + 1
last = 0
last_other = 0
past_beats = []
election_timeout = False
current_term = 0
leader = False
candidate = False
votes = 0
majority = math.ceil(num_total / 2) + 1
leader_ready = False
no_op_index = 0
puts_cache = []
gets_cache = []
# r = random.randint(4, 8)
messages = {"appends": {}, "puts": {}, "gets": {}}

first_append_entry = 0

most_recent_leader = ""
voting_hist = []

log = []
kvstore = {}

commit_index = -1
applied_index = -1

next_index = {}
match_index = {}

for the_id in replica_ids:
	next_index[the_id] = 0
	match_index[the_id] = -1
	messages["appends"][the_id] = []
append_oks = 0

def make_follower():
	puts_cache = []
	gets_cache = []
	votes = 0
	leader_ready = False
	leader = False
	candidate = False

def print_log(typ):
	i = 0
	#print("START %s %s LOG ----------" % (typ, my_id))
	for entry in log:
		the_key = ""
		for key in list(entry.keys()):
			if key != 'term' and key != 'client_ID' and key != 'MID':
				the_key = key
		#print("%d. TERM: %d, KEY: %s, VALUE: %s, MID: %s" % (i, entry["term"], the_key, entry[the_key], entry["MID"]))
		i += 1
	#print("END %s %s LOG ----------" % (typ, my_id))

def up_to_date(msg):
	if msg['term'] > current_term:
		return True
	elif msg['term'] == current_term:
		return msg['index'] >= len(log) - 1
	else:
		return False

def send_append_entry(msg):
	for the_id in replica_ids:
		rep_next_index = next_index[the_id]
		if len(log) == 0:
			term = 1
		else:
			term = log[rep_next_index - 1]["term"]
		new_msg = {"src": my_id, "dst": the_id,
			"leader": my_id, "type": "append_entry",
			"key": msg['key'], "value": msg['value'],
			"term": current_term, "prev_index": rep_next_index - 1,
			"prev_term": term, "lead_commit_index": commit_index,
			"client_ID": msg['src'], "MID": msg["MID"], "time": time.time()}
		sock.send(json.dumps(new_msg).encode())
		messages["appends"][str(the_id)].append(new_msg)
		# messages[msg["MID"] + "AE" + str(the_id)] = msg

# def resend_to_follower(i):
# 	msg = appends.pop(i)
# 	msg["time"] = time.time()
# 	appends.insert(0, msg)
# 	json_msg = json.dumps(msg)
# 	sock.send(json_msg.encode())

def send_to_follower(dst, msg):
	index = next_index[dst]
	the_key = ""
	if index == 0:
		prev_term = 1
	else:
		prev_term = log[index]['term']

	for key in list(log[index].keys()):
		if key != 'term' and key != 'client_ID' and key != 'MID':
			the_key = key

	new_msg = {"src": my_id, "dst": dst,
		   "leader": my_id, "type": "append_entry",
		   "key": the_key, "value": log[index][the_key],
		   "term": current_term, "prev_index": index - 1,
		   "prev_term": prev_term, "lead_commit_index": commit_index,
		   "client_ID": msg['client_ID'], "MID": msg["MID"], "time": time.time()}
	json_msg = json.dumps(new_msg)
	sock.send(json_msg.encode())
	messages["appends"][str(dst)].append(new_msg)
	# messages[msg["MID"] + "AE" + str(dst)] = msg

def reply_false(msg):
	return_msg = {"src": my_id, "dst": msg['src'], "leader": msg["src"],
	"type": "append_fail", "client_ID": msg['src'], "MID": msg["MID"]}
	return_msg_json = json.dumps(return_msg)
	sock.send(return_msg_json.encode())

def reply_true(msg):
	return_msg = {"src": my_id, "dst": msg['src'], "leader": msg['src'],
	"type": "append_ok", "client_ID": msg['src'], "MID": msg["MID"]}
	return_msg_json = json.dumps(return_msg)
	sock.send(return_msg_json.encode())

def resend_unacked():
	entries = []
	for the_id in replica_ids:
		if messages["appends"][the_id]:
			rep_next_index = next_index[the_id]
			if len(log) == 0:
				term = 1
			else:
				term = log[rep_next_index - 1]["term"]
			msg = {"src": my_id, "dst": the_id,
			"leader": my_id, "type": "bulk_append",
			"key": "bulk", "value": "bulk",
			"term": current_term, "prev_index": rep_next_index - 1,
			"prev_term": term, "lead_commit_index": commit_index,
			"client_ID": "bulk", "MID": "aaaaaaaaaaaaaaaa", "time": time.time()}
			appends = messages["appends"][the_id]
			appends = [x for x in appends if time.time() - x["time"] > .05]
			for append in appends:
				# print_log("LEADER")
				append["time"] = time.time()
				if len(entries) >= 50:
					msg["entries"] = entries
					msg["type"] = "bulk_append"
					sock.send(json.dumps(msg).encode())
					entries = []
				else:
					entries.append(append)
			if entries:
				msg["entries"] = entries
				msg["type"] = "bulk_append"
				sock.send(json.dumps(msg).encode())
				entries = []

while True:
	clock = time.time()
	second_clock = time.time()
	if leader:
		resend_unacked()
		for N in range(commit_index + 1, len(log)):
			num_matched = 0
			for the_id in replica_ids:
				if match_index[the_id] >= N:
					num_matched += 1
			if num_matched >= majority - 1 and log[N]["term"] == current_term:
				commit_index = N
		# code runs every 2 seconds
		if clock - last > 2:
			# send heartbeat
			for the_id in replica_ids:
				rep_next_index = next_index[the_id]
				if len(log) == 0:
					term = 1
				else:
					term = log[rep_next_index - 1]["term"]
				msg = {"src": my_id, "dst": the_id,
					"leader": my_id, "type": "append_entry",
					"key": "", "value": "",
					"term": current_term, "prev_index": rep_next_index - 1,
					"prev_term": term, "lead_commit_index": commit_index, "time": ""}
				#print(str(my_id) + " sent heartbeat")
				sock.send(json.dumps(msg).encode())
			last = clock
		if not leader_ready and commit_index >= no_op_index:
			leader_ready = True
			first_append_entry = time.time()
			for msg in puts_cache:
				log.append({msg["key"]: msg["value"], "term": current_term,
							"client_ID": msg['src'], "MID": msg['MID']})
				send_append_entry(msg)
			for msg in gets_cache:
				value = kvstore.get(msg['key'], "")
				return_msg = {"src": my_id, "dst": msg['src'],
				"leader": my_id, "type": "ok", "MID": msg['MID'], "value": value}
				return_msg_json = json.dumps(return_msg)
				sock.send(return_msg_json.encode())
				messages["gets"][msg["MID"]] = return_msg

	# if have not received a heart beat... (empty list)
	# if not leader and second_clock - last_other > r:
	if not leader and second_clock - last_other > random.randint(4, 8):
		# if no heartbeats received.. then begin election timeout
		if len(past_beats) == 0:
			election_timeout = True
		else:
			past_beats = []
		last_other = second_clock
		r = random.randint(4, 8)

	while commit_index > applied_index:
		applied_index += 1
		the_key = ""
		for key in list(log[applied_index].keys()):
			if key != 'term' and key != 'client_ID' and key != 'MID':
				the_key = key
		val = log[applied_index][the_key]
		kvstore[the_key] = val
		if leader and log[applied_index]['client_ID'] != "no-op":
			if msg["MID"] not in messages["puts"]:
				return_msg = {"src": my_id, "dst": log[applied_index]['client_ID'],
							"leader": my_id, "type": "ok", "MID": log[applied_index]['MID']}
				return_msg_json = json.dumps(return_msg)
				sock.send(return_msg_json.encode())
		messages["puts"][msg["MID"]] = return_msg

	if candidate and votes >= majority:
		#print(str(my_id) + " got enough votes")
		most_recent_leader = my_id
		leader = True
		candidate = False
		log_len = len(log)
		leader_ready = False
		no_op_index = log_len
		for the_id in replica_ids:
			next_index[the_id] = log_len
			match_index[the_id] = -1
		if log_len == 0:
			prev_term = 1
		else:
			prev_term = log[log_len - 1]['term']
		for the_id in replica_ids:
			msg = {"src": my_id, "dst": the_id,
				"leader": my_id, "type": "append_entry",
				"key": "no-op", "value": "",
				"term": current_term, "prev_index": log_len - 1,
				"prev_term": prev_term, "lead_commit_index": commit_index,
				"client_ID": "no-op", "MID": "no-op", "time": time.time()}
			sock.send(json.dumps(msg))
		log.append({"no-op": "", "term": current_term, "client_ID": "no-op", "MID": "no-op"})

	ready = select.select([sock], [], [], 0.1)[0]
	if sock in ready:
		msg_raw = sock.recv(32768)
		if len(msg_raw) == 0:
			continue
		msg = json.loads(msg_raw)

		if leader and msg['type'] == 'append_entry' or msg['type'] == 'bulk_append' and msg["term"] >= current_term:
			make_follower()

		# if you get a request vote, vote for them if you have not yet voted in this term
		if msg['type'] == "RequestVote":
			# if you haven't voted yet this term and they have greater or equal term
			if msg['term'] not in voting_hist and up_to_date(msg):
				return_msg = {"src": my_id, "dst": msg['src'],
							  "leader": "FFFF", "type": "vote"}
				return_msg_json = json.dumps(return_msg)
				sock.send(return_msg_json.encode())
				voting_hist.append(msg['term'])

		# follower committed
		if msg['type'] == 'append_ok':
			append_oks += 1
			next_index[msg['src']] += 1
			match_index[msg['src']] = next_index[msg['src']] - 1
			messages["appends"][msg["src"]] = [x for x in messages["appends"][msg["src"]] if x["MID"] != msg["MID"]]

		if msg['type'] == "append_fail":
			next_index[msg['src']] -= 1
			send_to_follower(msg["src"], msg)

		# append_entry from leader, append to own and send back OK
		if not leader and msg['type'] == 'append_entry' or msg["type"] == "bulk_append":
			current_term = msg['term']
			most_recent_leader = msg['leader']
			candidate = False
			entries = [msg]
			if msg["type"] == "bulk_append":
				# time.sleep(0.5)
				# print_log("FOLLWER")
				entries = msg["entries"]
			for entry in entries:
				log_idx = len(log) - 1
				if entry['key'] == "":
					past_beats.append(1)
					if entry['lead_commit_index'] > commit_index:
						commit_index = min(entry['lead_commit_index'], len(log) - 1)
					continue
				if entry['term'] < current_term:
					reply_false(entry)
					#print("term mismatched")
				elif entry['prev_index'] == -1:
					log.append({entry['key']: entry['value'], "term": entry['term'],
					"client_ID": entry['client_ID'], "MID": entry['MID']})
					reply_true(entry)
				elif log_idx < entry['prev_index'] or \
						log[int(entry["prev_index"])]["term"] != entry['prev_term']:
					reply_false(entry)
					#print("log index mismatched")
				elif log_idx == entry["prev_index"]:
					log.append({entry['key']: entry['value'], "term": entry['term'], 
					"client_ID": entry['client_ID'], "MID": entry['MID']})
					reply_true(entry)
				elif log_idx > entry['prev_index']:
					if log[entry['prev_index'] + 1]["term"] != entry['term']:
						log = log[0 : entry['prev_index'] + 1]
					log.append({entry['key']: entry['value'], "term": entry['term'], 
					"client_ID": entry['client_ID'], "MID": entry['MID']})
					reply_true(entry)

			if msg['lead_commit_index'] > commit_index:
				commit_index = min(msg['lead_commit_index'], len(log) - 1)

		# if you get a vote, keep track
		if msg['type'] == "vote" and candidate:
			votes += 1

		# if you get a put message
		elif msg['type'] == 'put':
			# redirect to leader
			if not leader:
				return_msg = {"src": my_id, "dst": msg['src'],
							  "leader": most_recent_leader, "type": "redirect",
							  "MID": msg['MID']}
				return_msg_json = json.dumps(return_msg)
				sock.send(return_msg_json.encode())
			# you are leader, append to own log and send out to replicas
			else:
				if msg["MID"] in messages["puts"]:
					sock.send(json.dumps(messages["puts"][msg["MID"]]).encode())
					continue
				if not leader_ready:
					puts_cache.append(msg)
				else:
					# put into own log
					log.append({msg["key"]: msg["value"], "term": current_term,
								"client_ID": msg['src'], "MID": msg['MID']})
					# send out append entries
					send_append_entry(msg)

		# get message from client
		elif msg['type'] == 'get':
			# redirect to leader
			if not leader:
				return_msg = {"src": my_id, "dst": msg['src'],
							  "leader": most_recent_leader, "type": "redirect",
							  "MID": msg['MID']}
				return_msg_json = json.dumps(return_msg)
				sock.send(return_msg_json.encode())
			# if leader, get the value and send back
			else:
				if msg["MID"] in messages["gets"]:
					sock.send(json.dumps(messages["gets"][msg["MID"]]).encode())
					continue
				value = kvstore.get(msg['key'], "")
				if not leader_ready:
					gets_cache.append(msg)
				else:
					value = kvstore.get(msg['key'], "")
					if not value:
						return_msg = {"src": my_id, "dst": msg['src'],
								"leader": my_id, "type": "fail", "MID": msg['MID'], "value": value}
						continue
					return_msg = {"src": my_id, "dst": msg['src'],
								"leader": my_id, "type": "ok", "MID": msg['MID'], "value": value}
					return_msg_json = json.dumps(return_msg)
					sock.send(return_msg_json.encode())
					messages["gets"][msg["MID"]] = return_msg

	if election_timeout:
		# transition to candidate
		candidate = True
		# increment the current term
		current_term += 1
		# vote for yourself
		votes = 1
		# request votes from others
		if len(log) == 0:
			term = 1
		else:
			term = log[-1]['term']

		msg = {'src': my_id, 'dst': "FFFF", 'leader': "FFFF",
			   'type': 'RequestVote', "term": current_term,
			   "index": len(log) - 1,
					   "prev_term": term}
		sock.send(json.dumps(msg).encode())
		print("requesting votes")
		election_timeout = False
